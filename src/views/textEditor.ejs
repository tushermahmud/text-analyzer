<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Editor</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script> <!-- Ensure jQuery is loaded -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
        body {
            background-color: #f8f9fa;
        }
        .text-area {
            resize: none;
        }
        .card {
            margin-bottom: 20px;
        }
        .logout-button {
            float: inline-end;
            display: table;
        }
    </style>
</head>
<body>
    <div class="container mt-5 ">
        <div class="container">
            <a href="/logout" class="btn btn-danger float-end">Logout</a>
        </div>
        <h1 class="text-center">Welcome to the Text Editor, <%= user.displayName %>!</h1>
        
        <div class=" justify-content-center align-items-center">
            <div class="card mt-4">
                <div class="card-body">
                    <form id="textForm">
                        <div class="form-group">
                            <label for="textInput">Enter your text:</label>
                            <textarea id="textInput" class="form-control text-area" rows="4" placeholder="Type your text here..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>
                </div>
            </div>
        </div>
        <button id="fetch-reports">Get My Text Analysis</button>

        <!-- Report Details Modal -->
        <div class="modal fade" id="reportDetailsModal" tabindex="-1" role="dialog" aria-labelledby="reportDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reportDetailsModalLabel">Report Details</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id="reportDetailsContent">
                        <!-- Report details will be populated here -->
                        <div id="reports"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <h2 class="mt-5">Saved Texts</h2>
        <div id="textList">
            <!-- Text entries will be populated here -->
        </div>

        <!-- Update Text Modal -->
        <div class="modal fade" id="updateTextModal" tabindex="-1" role="dialog" aria-labelledby="updateTextModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="updateTextModalLabel">Update Text</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <textarea id="updateTextInput" class="form-control" rows="4" placeholder="Type your updated text here..." required></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="submitUpdateText">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('textForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const textInput = document.getElementById('textInput').value;

            // Send the text to the backend
            fetch('crud/text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content: textInput }),
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Network response was not ok.');
            })
            .then(data => {                
                document.getElementById('textInput').value = ''; // Clear input
                fetchTexts(); // Refresh the text list
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

        document.getElementById('fetch-reports').addEventListener('click', async () => {
            try {
                const response = await fetch('user/report');
                if(response){
                    console.log(response)
                }

                // Check if the response is OK (status in the range 200-299)
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Error ${response.status}: ${errorData.message}`);
                }

                const reports = await response.json();
                const reportsContainer = document.getElementById('reports');
                reportsContainer.innerHTML = ''; // Clear existing reports

                // Check if reports are empty
                if (reports.length === 0) {
                    reportsContainer.innerHTML = '<p>No reports available.</p>';
                    return;
                }

                // Populate the reports container with the fetched data
                reports.forEach(report => {
                    console.log(report)
                    const reportHtml = `
                    <div>
                        <h3>Text ID: ${report.textId}</h3>
                        <p><strong>Text:</strong> ${report.text}</p>
                        <p><strong>Word Count:</strong> ${report.wordCount}</p>
                        <p><strong>Character Count:</strong> ${report.charCount}</p>
                        <p><strong>Sentence Count:</strong> ${report.sentenceCount}</p>
                        <p><strong>Paragraph Count:</strong> ${report.paragraphCount}</p>
                        <p><strong>Longest Word:</strong> ${report.longestWord}</p>
                    </div>
                    `;
                    reportsContainer.innerHTML += reportHtml;
                });
                // Show the modal
        $('#reportDetailsModal').modal('show');
            } catch (error) {
                console.error('Error fetching reports:', error);
                const reportsContainer = document.getElementById('reports');
                reportsContainer.innerHTML = '<p>Error fetching reports. Please try again later.</p>';
            }
        });
        function updateText(id) {
                // Show the modal
                $('#updateTextModal').modal('show');

                // Clear the textarea before showing the modal
                document.getElementById('updateTextInput').value = '';

                // Set up the submit button click event
                document.getElementById('submitUpdateText').onclick = function() {
                    const updatedText = document.getElementById('updateTextInput').value;

                    // Send the updated text to the backend
                    fetch(`crud/text/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ content: updatedText }),
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok.');
                    })
                    .then(data => {
                        $('#updateTextModal').modal('hide'); // Hide the modal
                        fetchTexts(); // Refresh the text list
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                };
            }

        function fetchTexts() {
            fetch('crud/text', { method: "GET"})
                .then(response => response.json())
                .then(data => {
                    const textList = document.getElementById('textList');
                    textList.innerHTML = ''; // Clear existing texts
                 
                    if (data) {
                        data.data.forEach(text => {                            
                            const card = document.createElement('div');
                            card.className = 'card';
                            card.innerHTML = `
                                <div class="card-body">
                                    <p class="card-text">${text.content}</p>
                                    <p class="word-count-result" id="wordCount-${text._id}"></p>
                                    <p class="word-count-result" id="sentenceCount-${text._id}"></p>
                                    <p class="word-count-result" id="totalCharacters-${text._id}"></p>
                                    <p class="word-count-result" id="longestWord-${text._id}"></p>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-danger" onclick="deleteText('${text._id}')">Delete</button>
                                        <button class="btn btn-warning" onclick="updateText('${text._id}')">Update</button>
                                        <button class="btn btn-info" onclick="countWords('${text._id}')">Count Words</button>
                                        <button class="btn btn-info" onclick="countSentences('${text._id}')">Count Sentences</button>
                                        <button class="btn btn-info" onclick="countCharacters('${text._id}')">Count Characters</button>
                                        <button class="btn btn-info" onclick="longestWord('${text._id}')">Longest Word</button>
                                    </div>
                                </div>
                            `;
                            textList.appendChild(card);
                        });
                    } else {
                        console.error('Expected an array but got:', data);
                    }
                })
                .catch(error => console.error('Error fetching texts:', error));
        }

        function deleteText(id) {
            fetch(`crud/text/${id}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    console.log('Text deleted');
                    fetchTexts(); // Refresh the text list
                } else {
                    console.error('Failed to delete text');
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function updateText(id) {
            // Show the modal
            $('#updateTextModal').modal('show');

            // Set up the submit button click event
            document.getElementById('submitUpdateText').onclick = function() {
                const updatedText = document.getElementById('updateTextInput').value;

                // Send the updated text to the backend
                fetch(`crud/text/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ content: updatedText }),
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(data => {
                    console.log('Text updated:', data);
                    $('#updateTextModal').modal('hide'); // Hide the modal
                    fetchTexts(); // Refresh the text list
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            };
        }
        
        function countWords(id, button) {
            fetch(`analysis/totalWord/${id}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Failed to count words');
            })
            .then(data => {
                // Assuming the response contains the word count
                const wordCount = data.data; // Adjust based on your API response structure
                const wordCountDisplay = document.getElementById(`wordCount-${id}`);
                wordCountDisplay.innerText = `Word Count: ${wordCount}`; // Display the word count
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        function countSentences(id, button) {
            fetch(`analysis/totalSentence/${id}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Failed to count words');
            })
            .then(data => {
                // Assuming the response contains the word count
                const wordCount = data.data; // Adjust based on your API response structure
                const wordCountDisplay = document.getElementById(`sentenceCount-${id}`);
                wordCountDisplay.innerText = `Sentence Count: ${wordCount}`; // Display the word count
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
        
        function countCharacters(id, button) {
            fetch(`analysis/totalCharacters/${id}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Failed to count words');
            })
            .then(data => {
                // Assuming the response contains the word count
                const wordCount = data.data; // Adjust based on your API response structure
                const wordCountDisplay = document.getElementById(`totalCharacters-${id}`);
                wordCountDisplay.innerText = `Total Characters: ${wordCount}`; // Display the word count
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
        
        function longestWord(id, button) {
            fetch(`analysis/longestWord/${id}`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Failed to count words');
            })
            .then(data => {
                // Assuming the response contains the word count
                const word= data.data; // Adjust based on your API response structure
                const wordDisplay = document.getElementById(`longestWord-${id}`);
                wordDisplay.innerText = `Longest Word: ${word}`; // Display the word count
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        // Call fetchTexts when the page loads
        document.addEventListener('DOMContentLoaded', fetchTexts);
    </script>
</body>
</html>